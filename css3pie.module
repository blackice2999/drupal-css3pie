<?php
// $Id: css3pie.module,v 1.1.2.1 2010/11/16 11:27:02 blackice2999 Exp $

/**
 * @file css3pie.module
 * a very simple Drupal module to implement the css3pie.com javascript to your drupal and
 * make the css selectors configurable over ui. This module creates a real css file on drupal
 * files folder and add them via drupal_add_css.
 */

/**
 * Implements hook_perm()
 * only users with "administer css3pie" permission can edit
 * the settings form.
 *
 * @see hook_perm();
 * @return <array> permissions array
 */
function css3pie_perm() {
  return array('administer css3pie' => array(
    'title' => t('Administer CSS3PIE selectors'),
    'description' => t('user can change the used css3pie selectors'),
  ));
}

/**
 * Implements hook_menu()
 * admin settings page under themes page
 *
 * @see hook_menu();
 * @return string
 */
function css3pie_menu() {
  $items = array();

  $items['admin/appearance/css3pie'] = array(
    'title' => 'css3pie Settings',
    'description' => 'Adds css3pie support to Drupal',
    'access arguments' => array('administer css3pie'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('css3pie_admin'),
    'file' => 'css3pie.admin.inc',
  );

  return $items;
}

/**
 * Implements own hook_css3pie()
 * returns a array with selectors
 * that will be added to css3pie css file on next cache clear
 *
 * @return <array> multiarray with selectors use modulname as key for namespace
 */
function css3pie_css3pie() {
  $css3pie_selectors = variable_get('css3pie_css_selectors', '');
  $css3pie_namespace = 'css3pie';
  
  if ($css3pie_selectors) {
    $css3pie_selectors = explode("\n", $css3pie_selectors);
    $css3pie_selectors = array_filter(array_map('trim', $css3pie_selectors));

    return array($css3pie_namespace => $css3pie_selectors);
  }
}

/**
 * theme preprocess to add the css file
 * @param <type> $vars
 */
function css3pie_preprocess_html(&$vars) {
  // get the path of css3pie file
  $path_to_css3pie_css_file = file_default_scheme() . '://css3pie/css3pie.css';

  // add to drupal´ css only if we have a cssfile
  if ($path_to_css3pie_css_file) {
    drupal_add_css($path_to_css3pie_css_file);
  }
}

/**
 * Implementation of hook_library()
 * add the css3pie files as library so any module maintaner can use hook_library_alter()
 * but we can´t use drupal_add_library on the htc file because we use it in the css file
 */
 function css3pie_library() {
   $libraries = array();
   
   // css3pie htc file...
   $libraries['css3pie_htc'] = array(
    'title' => 'CSS3PIE',
    'website' => 'http://www.css3pie.com',
    'version' => '1.0beta3',
    'js' => array(
      drupal_get_path('module', 'css3pie') . '/css3pie/PIE.htc' => array(),
    ),
   );
   
   // css3pie php wrapper for htc (outputs the right http header)
   $libraries['css3pie_php'] = array(
     'title' => 'CSS3PIE',
     'website' => 'http://www.css3pie.com',
     'version' => '1.0beta3',
     'js' => array(
       drupal_get_path('module', 'css3pie') . '/css3pie/PIE.htc' => array(),
     ),    
   );
   
   // @TODO: add css3pie javascript support...
   $libraries['css3pie_js'] = array(
     'title' => 'CSS3PIE',
     'website' => 'http://www.css3pie.com',
     'version' => '1.0beta3',
     'js' => array(
       drupal_get_path('module', 'css3pie') . '/css3pie/PIE.js' => array(),
     ),    
   );
   
   return $libraries;
 }

/**
 * helper function get all selectors and generates content for css file
 * @param <type> $css
 * @return <type> path to new created file
 */
function _css3pie_build_css3pie_css() {
  $output = '';

  // invoke hook_css3pie in all modules to get the selectors
  $css3pie_selectors = module_invoke_all('css3pie');

  $show_namespaces_as_comments = variable_get('css3pie_css_comment', TRUE);
  $cnt_namespaces = count($css3pie_selectors);
  $i = 0;

  foreach ($css3pie_selectors as $namespace => $selectors) {
    $i++;

    if($show_namespaces_as_comments) {
      $output .= '/* ' . $namespace . ' */' . "\n";
    }
    $output .= implode(', ', $selectors);

    if($i < $cnt_namespaces) {
      $output .= ',' . "\n";
    }
  }

  $css3mode = variable_get('css3pie_css_use_php_wrapper', 'htc');
  if ( $css3mode === 'htc' ) {
    $css3library = drupal_get_library('css3pie', 'css3pie_htc');
  }
  elseif ( $css3mode === 'php' ) {
    $css3library = drupal_get_library('css3pie', 'css3pie_php');    
  }

  // get file
  $css3file = '';
  foreach ($css3library['js'] as $file => $options) {
    $css3file = $file;
  }

  // @TODO: fix hard key search in array
  $output .= "\n" . '{' . "\n" . '  behavior: url('. base_path() . $css3file .');' . "\n" . '}';

  return _css3pie_create_css3pie_css($output);
}

/**
 * helper function creates a real css file within files directory using new drupal streamwrapper
 * that be can added via drupal_add_css();
 *
 * @param <type> $css - the css markup
 * @return <type>
 */
function _css3pie_create_css3pie_css($css = NULL) {
  if (!$css) {
    drupal_set_message(t('no css content given.'),'error');
    return FALSE;
  }
  
  // create the path stream to files directory (D7)
  $css3pie_css_path = file_default_scheme() . '://css3pie';
  
  // create css3pie directory and check if successfull...
  if (!file_prepare_directory($css3pie_css_path, FILE_CREATE_DIRECTORY)) {
      drupal_set_message(t('Unable to create CSS3PIE CSS cache directory. Check the permissions on your files directory.'), 'error');
      return;
  }
  
  // save css data to our real css file...
  $filename = $css3pie_css_path . '/css3pie.css';
  $filename = file_unmanaged_save_data($css, $filename, FILE_EXISTS_REPLACE);

  // clear the css cache
  drupal_clear_css_cache();

  return $filename;
}